version: '3.8'

services:
  # RabbitMQ local para desenvolvimento/testes
  rabbitmq:
    image: rabbitmq:3-management
    container_name: pedidos-rabbitmq
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=vrsoftware
      - RABBITMQ_DEFAULT_PASS=6uOVxR6dy1H7Zqfz
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - pedidos-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: ./pedidos-backend
      dockerfile: Dockerfile
    container_name: pedidos-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=vrsoftware
      - SPRING_RABBITMQ_PASSWORD=6uOVxR6dy1H7Zqfz
      - SPRING_RABBITMQ_VIRTUAL_HOST=/
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - pedidos-network
    restart: unless-stopped

networks:
  pedidos-network:
    name: pedidos-network
    driver: bridge

volumes:
  rabbitmq_data:
    name: pedidos-rabbitmq-data
